/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueryObservation struct {
}

type QueryParameters struct {

	// The sum of the `total` events.
	// +kubebuilder:validation:Required
	Denominator *string `json:"denominator" tf:"denominator,omitempty"`

	// The sum of all the `good` events.
	// +kubebuilder:validation:Required
	Numerator *string `json:"numerator" tf:"numerator,omitempty"`
}

type ServiceLevelObjectiveObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Thresholds []ThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type ServiceLevelObjectiveParameters struct {

	// A description of this service level objective.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if itâ€™s referenced by other resources (e.g. dashboards).
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// A static set of groups to filter monitor-based SLOs
	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// A static set of monitor IDs to use as part of the SLO
	// +kubebuilder:validation:Optional
	MonitorIds []*float64 `json:"monitorIds,omitempty" tf:"monitor_ids,omitempty"`

	// Name of Datadog service level objective
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The metric query of good / total events
	// +kubebuilder:validation:Optional
	Query []QueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	// +kubebuilder:validation:Required
	Thresholds []ThresholdsParameters `json:"thresholds" tf:"thresholds,omitempty"`

	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Whether or not to validate the SLO.
	// +kubebuilder:validation:Optional
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type ThresholdsObservation struct {
	TargetDisplay *string `json:"targetDisplay,omitempty" tf:"target_display,omitempty"`

	WarningDisplay *string `json:"warningDisplay,omitempty" tf:"warning_display,omitempty"`
}

type ThresholdsParameters struct {

	// The objective's target in`[0,100]`.
	// +kubebuilder:validation:Required
	Target *float64 `json:"target" tf:"target,omitempty"`

	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	// +kubebuilder:validation:Required
	Timeframe *string `json:"timeframe" tf:"timeframe,omitempty"`

	// The objective's warning value in `[0,100]`. This must be greater than the target value.
	// +kubebuilder:validation:Optional
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

// ServiceLevelObjectiveSpec defines the desired state of ServiceLevelObjective
type ServiceLevelObjectiveSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceLevelObjectiveParameters `json:"forProvider"`
}

// ServiceLevelObjectiveStatus defines the observed state of ServiceLevelObjective.
type ServiceLevelObjectiveStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceLevelObjectiveObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceLevelObjective is the Schema for the ServiceLevelObjectives API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type ServiceLevelObjective struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceLevelObjectiveSpec   `json:"spec"`
	Status            ServiceLevelObjectiveStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceLevelObjectiveList contains a list of ServiceLevelObjectives
type ServiceLevelObjectiveList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceLevelObjective `json:"items"`
}

// Repository type metadata.
var (
	ServiceLevelObjective_Kind             = "ServiceLevelObjective"
	ServiceLevelObjective_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceLevelObjective_Kind}.String()
	ServiceLevelObjective_KindAPIVersion   = ServiceLevelObjective_Kind + "." + CRDGroupVersion.String()
	ServiceLevelObjective_GroupVersionKind = CRDGroupVersion.WithKind(ServiceLevelObjective_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceLevelObjective{}, &ServiceLevelObjectiveList{})
}
